class MathUtils {

    // math utilities, to help count some useful staff
    // class contains only fuctions

    function int remainder(int dividend, int divisor) {
        return dividend - ((dividend / divisor) * divisor); 
    }

    function Fraction pi() {
        return Fraction.new(3, 141);
    }

    function int factorial(int n) {
        var int result;
        let result = 1;
    
        while (n > 1) {
            let result = result * n;
            let n = n - 1;
        }

        return result;
    }

    function Fraction sqrt(Fraction fraction) {
        var Fraction value, oldValue;
        var Fraction dividedValue, addedValue;

        if (fraction.integer() = 0 & fraction.fraction() = 0) {
            return Fraction.new(0, 0);
        }

        let value = fraction;

        while (~(value.integer() = oldValue.integer()) & ~(value.fraction() = oldValue.fraction())) {
            let oldValue = value;
            let dividedValue = fraction.divide(value);
            let addedValue = value.add(dividedValue);
            let dividedValue = addedValue.divide(Fraction.new(2, 0));
            let value = dividedValue;
        }

        return oldValue;
    }

function Fraction pow(Fraction base, int exponent) {
        var Fraction tempResult;

        if (exponent = 0) {
            return Fraction.new(1, 0);
        }

        let tempResult = Fraction.new(base.integer(), base.fraction());
        while (exponent > 1) {
            let tempResult = tempResult.multiply(base);
            let exponent = exponent - 1;
        }

        return tempResult;
    }

    function Fraction sin(Fraction angle) {
        var Fraction result, part1, part2, part3;
        
        let result = Fraction.new(angle.integer(), angle.fraction());

        let part1 = MathUtils.pow(angle, 3);
        let part1 = part1.integerDivide(MathUtils.factorial(3));

        let part2 = MathUtils.pow(angle, 5);
        let part2 = part2.integerDivide(MathUtils.factorial(5));

        let part3 = MathUtils.pow(angle, 7);
        let part3 = part3.integerDivide(MathUtils.factorial(7));

        let result = result.minus(part1);
        let result = result.add(part2);
        let result = result.minus(part3);

        return result;
    }

function Fraction cos(Fraction angle) {
        var Fraction result, part1, part2, part3;
        
        let result = Fraction.new(1, 0);

        let part1 = MathUtils.pow(angle, 2);
        let part1 = part1.integerDivide(MathUtils.factorial(2));

        let part2 = MathUtils.pow(angle, 4);
        let part2 = part2.integerDivide(MathUtils.factorial(4));

        let part3 = MathUtils.pow(angle, 6);
        let part3 = part3.integerDivide(MathUtils.factorial(6));

        let result = result.minus(part1);
        let result = result.add(part2);
        let result = result.minus(part3);

        return result;
    }

    function Fraction sqrt(Fraction root) {
        var Fraction subResult, result, copyRoot;
        var int iterationCount;

        if ((root.integer() = 0) & (root.fraction() = 0)) {
            return Fraction.new(0, 0);
        }

        let iterationCount = 4;
        let result = Fraction.new(1, 0);

        while (iterationCount > 0) {
            let copyRoot = Fraction.new(root.integer(), root.fraction());
            let subResult = copyRoot.divide(result);
            let result = result.add(subResult);
            let result = result.integerDivide(2);

            let iterationCount = iterationCount - 1;
        }

        return result;
    }
}