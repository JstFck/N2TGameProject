class Map {

    // creation array with length N * N, which contains 1 as wall and 0 as space
    // class have only methods to take (x, y) item, array length and map

    field int size;
    field Array map, cellsWithOrbs;

    constructor Map new(int initSize) { // код из рейкастинга)
        var int i, checkValue, remainder;

        let size = initSize;
        let map = Array.new(size * size);
        let checkValue = size * size - size - 1;

        let i = 0;
        while (i < (size * size)) {
            let remainder = MathUtils.remainder(i, size);

            if ((i < size) | (i > checkValue) | (remainder = 0) | (remainder = (size -  1))) {
                let map[i] = 1;
                //let cellsWithOrbs[i] = 0; когда эта строка есть, появляется ошибка Runtime
            }
            else {
                let map[i] = 0;
                let cellsWithOrbs[i] = 1;
            }
            
            let i = i + 1;
        }

        return this;
    }

    method void setMap() {
        let map[2 * 16 + 2] = 1;
        let map[2 * 16 + 3] = 1;
        let map[2 * 16 + 4] = 1;

        let map[2 * 16 + 6] = 1;
        let map[2 * 16 + 7] = 1;
        let map[2 * 16 + 8] = 1;
        let map[2 * 16 + 9] = 1;
        let map[2 * 16 + 10] = 1;
        let map[2 * 16 + 11] = 1;

        let map[2 * 16 + 14] = 1;

        let map[3 * 16 + 2] = 1;
        let map[3 * 16 + 3] = 1;
        let map[3 * 16 + 4] = 1;

        let map[3 * 16 + 6] = 1;
        let map[3 * 16 + 7] = 1;
        let map[3 * 16 + 8] = 1;
        let map[3 * 16 + 9] = 1;
        let map[3 * 16 + 14] = 1;

        let map[4 * 16 + 11] = 1;
        let map[4 * 16 + 12] = 1;

        let map[5 * 16 + 7] = 1;
        let map[5 * 16 + 8] = 1;
        let map[5 * 16 + 9] = 1;

        let map[6 * 16 + 1] = 1;
        let map[6 * 16 + 2] = 1;
        let map[6 * 16 + 3] = 1;
        let map[6 * 16 + 4] = 1;


        let map[6 * 16 + 7] = 1;

        let map[6 * 16 + 10] = 1;
        let map[6 * 16 + 12] = 1;
        let map[6 * 16 + 13] = 1;
        let map[6 * 16 + 14] = 1;

        let map[8 * 16 + 1] = 1;
        let map[8 * 16 + 2] = 1;
        let map[8 * 16 + 3] = 1;
        let map[8 * 16 + 4] = 1;

        let map[8 * 16 + 6] = 1;
        let map[8 * 16 + 7] = 1;
        let map[8 * 16 + 8] = 1;
        let map[8 * 16 + 9] = 1;

        let map[8 * 16 + 11] = 1;
        let map[8 * 16 + 12] = 1;
        let map[8 * 16 + 13] = 1;
        let map[8 * 16 + 14] = 1;

        let map[9 * 16 + 6] = 1;

        let map[9 * 16 + 9] = 1;

        let map[10 * 16 + 9] = 1;

        let map[11 * 16 + 5] = 1;
        let map[11 * 16 + 7] = 1;
        let map[11 * 16 + 12] = 1;
        let map[11 * 16 + 13] = 1;

        let map[12 * 16 + 5] = 1;
        let map[12 * 16 + 10] = 1;
        let map[12 * 16 + 13] = 1;

        let map[13 * 16 + 2] = 1;
        let map[13 * 16 + 3] = 1;
        let map[13 * 16 + 4] = 1;
        let map[13 * 16 + 5] = 1;
        let map[13 * 16 + 6] = 1;
        let map[13 * 16 + 7] = 1;

        let map[13 * 16 + 10] = 1;
        let map[13 * 16 + 13] = 1;

        return;
    }

    method void draw() { // отрисовка карты работает нормально
        var int i, x1, y1;

        let i = 0;
        while (i < (size * size)) {
            if (map[i] = 0) {
                do Screen.setColor(false);
            }
            
            let y1 = (i / size) * 16; 
            let x1 = MathUtils.remainder(i, size) * 16;  
            
            if ((x1 < 256) & (y1 < 256)) {
                do Screen.drawRectangle(x1, y1, x1 + 15, y1 + 15);
                do Screen.setColor(true);
                do Screen.drawPixel(x1 + 7, y1 + 7); // рисуем точку ВО ВСЕХ клетках

                if (cellsWithOrbs[i]) {
                    do Screen.drawPixel(x1 + 8, y1 + 8);
                }
            }
            
            let i = i + 1;
        }

        return;
    }

    method int getItemByScreenCoords(int x, int y) { 
        return map[(y / 16) * size + (x / 16)];
    }

    method int getSize() {
        return size;
    }

    method Array getMap() {
        return map;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}