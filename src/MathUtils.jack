class MathUtils {
    function int remainder(int dividend, int divisor) {
        return dividend - ((dividend / divisor) * divisor); 
    }

    function Fraction pi() {
        return Fraction.new(3, 141);
    }

    function int factorial(int n) {
        var int result;
        let result = 1;
    
        while (n > 1) {
            let result = result * n;
            let n = n - 1;
        }

        return result;
    }

    function Fraction pow(Fraction base, int exponent) {
        var Fraction tempResult;

        let tempResult = Fraction.new(base.integer(), base.fraction());
        while (exponent > 1) {
            let tempResult = tempResult.multiply(base);
            let exponent = exponent - 1;
        }
        return tempResult;
    }

    function Fraction sqrt(Fraction fraction) {
        var Fraction value, oldValue;
        var Fraction dividedValue, addedValue;

        if (fraction.integer() = 0 & fraction.fraction() = 0) {
            return Fraction.new(0, 0);
        }

        let value = fraction;

        while (~(value.integer() = oldValue.integer()) & ~(value.fraction() = oldValue.fraction())) {
            let oldValue = value;
            let dividedValue = fraction.divide(value);
            let addedValue = value.add(dividedValue);
            let dividedValue = addedValue.divide(Fraction.new(2, 0));
            let value = dividedValue;
        }

        return oldValue;
    }

    function Fraction sin(Fraction angle) {
        var Fraction s3, s5, s7, result, temp;

        let temp = MathUtils.pow(angle, 3);
        let s3 = temp.divide(Fraction.new(MathUtils.factorial(3), 0));
        let s5 = (temp * angle * angle) / Fraction.new(MathUtils.factorial(5), 0);
        let s3 = (temp * angle * angle * angle * angle) / Fraction.new(MathUtils.factorial(7), 0);

        return angle - s3 + s5 - s7;
    }
}