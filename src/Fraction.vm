function Fraction.new 0
    push constant 2
    call Memory.alloc 1
    pop pointer 0
    push argument 0
    pop this 0
    push argument 1
    pop this 1
    push pointer 0
    return
function Fraction.integer 0
    push argument 0
    pop pointer 0
    push this 0
    return
function Fraction.fraction 0
    push argument 0
    pop pointer 0
    push this 1
    return
function Fraction.dispose 0
    push argument 0
    pop pointer 0
    push pointer 0
    call Memory.deAlloc 1
    pop temp 0
    push constant 0
    return
function Fraction.add 0
    push argument 0
    pop pointer 0
    push this 0
    push argument 1
    call Fraction.integer 1
    add
    pop this 0
    push this 1
    push argument 1
    call Fraction.fraction 1
    add
    pop this 1
    push this 1
    push constant 1000
    gt
    not
    if-goto Fraction_1
    push this 1
    push constant 1000
    sub
    pop this 1
    push this 0
    push constant 1
    add
    pop this 0
    goto Fraction_0
label Fraction_1
label Fraction_0
    push argument 1
    call Fraction.dispose 1
    pop temp 0
    push pointer 0
    return
function Fraction.minus 0
    push argument 0
    pop pointer 0
    push this 0
    push argument 1
    call Fraction.integer 1
    gt
    push this 0
    push constant 0
    eq
    push argument 1
    call Fraction.integer 1
    and
    push constant 0
    eq
    or
    not
    if-goto Fraction_3
    push this 0
    push argument 1
    call Fraction.integer 1
    sub
    pop this 0
    push this 1
    push argument 1
    call Fraction.fraction 1
    sub
    pop this 1
    push this 1
    push constant 0
    lt
    not
    if-goto Fraction_5
    push this 0
    push constant 1
    sub
    pop this 0
    push this 1
    push constant 1000
    add
    pop this 1
    goto Fraction_4
label Fraction_5
label Fraction_4
    goto Fraction_2
label Fraction_3
    push argument 1
    call Fraction.integer 1
    push this 0
    sub
    pop this 0
    push argument 1
    call Fraction.fraction 1
    push this 1
    sub
    pop this 1
    push this 1
    push constant 0
    lt
    not
    if-goto Fraction_7
    push this 0
    push constant 1
    sub
    pop this 0
    push this 1
    push constant 1000
    add
    pop this 1
    goto Fraction_6
label Fraction_7
label Fraction_6
    push this 0
    push constant 0
    eq
    not
    if-goto Fraction_9
    push this 1
    neg
    pop this 1
    goto Fraction_8
label Fraction_9
label Fraction_8
    push this 0
    neg
    pop this 0
label Fraction_2
    push argument 1
    call Fraction.dispose 1
    pop temp 0
    push pointer 0
    return
function Fraction.multiply 3
    push argument 0
    pop pointer 0
    push this 0
    push argument 1
    call Fraction.integer 1
    call Math.multiply 2
    pop local 0
    push this 0
    push argument 1
    call Fraction.fraction 1
    call Math.multiply 2
    pop local 1
    push this 1
    push argument 1
    call Fraction.integer 1
    call Math.multiply 2
    pop local 2
    push local 0
    push local 1
    push constant 1000
    call Math.divide 2
    add
    push local 2
    push constant 1000
    call Math.divide 2
    add
    pop this 0
    push this 1
    push constant 10
    call Math.divide 2
    push argument 1
    call Fraction.fraction 1
    push constant 10
    call Math.divide 2
    call Math.multiply 2
    push constant 10
    call Math.divide 2
    push local 1
    push constant 1000
    call MathUtils.remainder 2
    add
    push local 2
    push constant 1000
    call MathUtils.remainder 2
    add
    pop this 1
label Fraction_10
    push this 1
    push constant 1000
    gt
    not
    if-goto Fraction_11
    push this 1
    push constant 1000
    sub
    pop this 1
    push this 0
    push constant 1
    add
    pop this 0
    goto Fraction_10
label Fraction_11
    push argument 1
    call Fraction.dispose 1
    pop temp 0
    push pointer 0
    return
function Fraction.divide 3
    push argument 0
    pop pointer 0
    push this 0
    push constant 1000
    call Math.multiply 2
    push this 1
    add
    pop local 0
    push argument 1
    call Fraction.integer 1
    push constant 1000
    call Math.multiply 2
    push argument 1
    call Fraction.fraction 1
    add
    pop local 1
    push local 0
    push local 1
    call Math.divide 2
    pop this 0
    push local 0
    push local 1
    call MathUtils.remainder 2
    pop local 2
    push local 2
    push constant 10
    call Math.multiply 2
    push local 1
    push constant 100
    call Math.divide 2
    call Math.divide 2
    pop this 1
    push argument 1
    call Fraction.dispose 1
    pop temp 0
    push pointer 0
    return
function Fraction.integerMultiply 0
    push argument 0
    pop pointer 0
    push this 0
    push argument 1
    call Math.multiply 2
    pop this 0
    push pointer 0
    return
function Fraction.integerDivide 3
    push argument 0
    pop pointer 0
    push this 0
    push argument 1
    call Math.divide 2
    pop local 0
    push this 0
    push argument 1
    call MathUtils.remainder 2
    pop local 2
    push local 0
    pop this 0
    push local 2
    push constant 10
    call Math.multiply 2
    push this 1
    push constant 100
    call Math.divide 2
    add
    pop local 2
    push local 2
    push argument 1
    call Math.divide 2
    push constant 10
    call Math.multiply 2
    pop local 0
    push this 1
    push constant 100
    call MathUtils.remainder 2
    pop this 1
    push local 2
    push argument 1
    call MathUtils.remainder 2
    pop local 2
    push local 2
    push constant 10
    call Math.multiply 2
    push this 1
    push constant 10
    call Math.divide 2
    add
    pop local 2
    push local 2
    push argument 1
    call Math.divide 2
    push local 0
    add
    push constant 10
    call Math.multiply 2
    pop local 0
    push this 1
    push constant 10
    call MathUtils.remainder 2
    pop this 1
    push local 2
    push argument 1
    call MathUtils.remainder 2
    pop local 2
    push local 2
    push constant 10
    call Math.multiply 2
    push this 1
    add
    pop local 2
    push local 2
    push argument 1
    call Math.divide 2
    push local 0
    add
    pop this 1
    push pointer 0
    return