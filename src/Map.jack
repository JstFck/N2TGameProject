class Map {

    // creation array with length N * N, which contains 1 as wall and 0 as space
    // class have only methods to take (x, y) item, array length and map

    field int size;
    field Array map;

    constructor Map new(int initSize) { // код из рейкастинга)
        var int i, checkValue, remainder;

        let size = initSize;
        let map = Array.new(size * size);
        let checkValue = size * size - size - 1;

        let i = 0;
        while (i < (size * size)) {
            let remainder = MathUtils.remainder(i, size);

            if ((i < size) | (i > checkValue) | (remainder = 0) | (remainder = (size -  1))) {
                let map[i] = 1;
            }
            else {
                let map[i] = 0;
            }
            
            let i = i + 1;
        }

        let map[4 * 16 + 5] = 1;

        return this;
    }

    method void draw() { // отрисовка карты работает нормально
        var int i, x1, y1;

        let i = 0;
        while (i < (size * size)) {

            if (map[i] = 0) {
                do Screen.setColor(false);
            }
            else {
                do Screen.setColor(true);
            }
            
            let y1 = (i / size) * 16; 
            let x1 = MathUtils.remainder(i, size) * 16;  
            
            if ((x1 < 256) & (y1 < 256)) {
                do Screen.drawRectangle(x1, y1, x1 + 15, y1 + 15);
            }
            
            let i = i + 1;
        }

        return;
    }

    method int getItemByScreenCoords(int x, int y) { // а вот оно работает непонятно как
        var int mapX, mapY;
        var int value;

        if ((x < 16) | (y < 16) | (x > 247) | (y > 247)) {
            return 1;  // cчитаем всё за пределами экрана стеной
        }

        let mapX = x / 16;
        let mapY = y / 16;
        let value = map[mapY * 16 + mapX];

        do Output.printInt(mapX);
        do Output.printInt(mapY);
        do Output.printChar(" ");
        
        return value;
    }

    method int getSize() {
        return size;
    }

    method Array getMap() {
        return map;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}